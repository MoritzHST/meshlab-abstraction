[{"C:\\Users\\Megaport\\Projekte\\ws2020-21-teamprojekt\\RealSense\\client\\src\\index.js":"1","C:\\Users\\Megaport\\Projekte\\ws2020-21-teamprojekt\\RealSense\\client\\src\\App.js":"2","C:\\Users\\Megaport\\Projekte\\ws2020-21-teamprojekt\\RealSense\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Megaport\\Projekte\\ws2020-21-teamprojekt\\RealSense\\client\\src\\shared\\AlertBox.js":"4","C:\\Users\\Megaport\\Projekte\\ws2020-21-teamprojekt\\RealSense\\client\\src\\shared\\MessageBox.js":"5","C:\\Users\\Megaport\\Projekte\\ws2020-21-teamprojekt\\RealSense\\client\\src\\start\\StartPanel.js":"6","C:\\Users\\Megaport\\Projekte\\ws2020-21-teamprojekt\\RealSense\\client\\src\\template\\Template.js":"7"},{"size":517,"mtime":1610027563171,"results":"8","hashOfConfig":"9"},{"size":1201,"mtime":1610027563170,"results":"10","hashOfConfig":"9"},{"size":375,"mtime":1610027563172,"results":"11","hashOfConfig":"9"},{"size":991,"mtime":1610027563173,"results":"12","hashOfConfig":"9"},{"size":532,"mtime":1610027563174,"results":"13","hashOfConfig":"9"},{"size":3395,"mtime":1610979866545,"results":"14","hashOfConfig":"9"},{"size":3158,"mtime":1610027563175,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1gwjn7b",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},"C:\\Users\\Megaport\\Projekte\\ws2020-21-teamprojekt\\RealSense\\client\\src\\index.js",[],["33","34"],"C:\\Users\\Megaport\\Projekte\\ws2020-21-teamprojekt\\RealSense\\client\\src\\App.js",["35"],"import './App.css';\r\nimport {Suspense, useState} from \"react\";\r\nimport AlertBox from \"./shared/AlertBox\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport StartPanel from \"./start/StartPanel\";\r\nimport axios from \"axios\";\r\n\r\n\r\nfunction App() {\r\n    const [state, setState] = useState(\"start\")\r\n    const [error, setError] = useState(0)\r\n\r\n    axios.defaults.headers = {\r\n        'Cache-Control': 'no-cache',\r\n        'Pragma': 'no-cache',\r\n        'Expires': '0',\r\n    };\r\n    axios.interceptors.response.use(null, error => {\r\n        setError(error || error.response.data.error)\r\n    });\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Suspense fallback={(<div>Loading</div>)}>\r\n                <Navbar bg=\"light\" expand=\"lg\">\r\n                    <Navbar.Brand>Hochschule Stralsund</Navbar.Brand>\r\n                </Navbar>\r\n                {error && !error.isEmpty() ? <AlertBox errorMsg={error}/> : null}\r\n\r\n                <Jumbotron className={\"AppBody\"}>\r\n                    {state === \"start\" ? <StartPanel/> : null}\r\n                </Jumbotron>\r\n            </Suspense>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Megaport\\Projekte\\ws2020-21-teamprojekt\\RealSense\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Megaport\\Projekte\\ws2020-21-teamprojekt\\RealSense\\client\\src\\shared\\AlertBox.js",[],"C:\\Users\\Megaport\\Projekte\\ws2020-21-teamprojekt\\RealSense\\client\\src\\shared\\MessageBox.js",[],"C:\\Users\\Megaport\\Projekte\\ws2020-21-teamprojekt\\RealSense\\client\\src\\start\\StartPanel.js",[],"C:\\Users\\Megaport\\Projekte\\ws2020-21-teamprojekt\\RealSense\\client\\src\\template\\Template.js",["36","37"],"import React, {useEffect, useRef, useState} from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport {FaPlus, FaTrashAlt, FaCheck} from \"react-icons/fa\"\r\nimport Button from \"react-bootstrap/Button\";\r\nimport axios from \"axios\";\r\n\r\n\r\nfunction uploadFile(event, callback) {\r\n    let files = event.target.files;\r\n\r\n    let uploadFile = files[0];\r\n\r\n    let reader = new FileReader();\r\n\r\n    let sendFile = {};\r\n    // Auslesen der Datei-Metadaten\r\n    sendFile.name = uploadFile.name;\r\n    sendFile.date = uploadFile.lastModified;\r\n    sendFile.size = uploadFile.size;\r\n    sendFile.type = uploadFile.type;\r\n\r\n    // Wenn der Dateiinhalt ausgelesen wurde...\r\n    reader.onload = function (theFileData) {\r\n        sendFile.fileData = theFileData.target.result;\r\n\r\n        axios.post(\"/templates\", sendFile)\r\n            .then(() => {\r\n                callback()\r\n            })\r\n    }\r\n    reader.readAsDataURL(uploadFile);\r\n}\r\n\r\n\r\nfunction Template(props) {\r\n    const [templates, setTemplates] = useState([])\r\n    const [newTemplate, setNewTemplate] = useState({})\r\n    let upload = useRef();\r\n\r\n    function refreshTemplates() {\r\n        axios.get(\"/templates\")\r\n            .then((result) => {\r\n                setTemplates(result.data)\r\n            })\r\n    }\r\n\r\n    function selectTemplate(item) {\r\n        props.setSelectedTemplate(item)\r\n    }\r\n\r\n    function deleteTemplate(item) {\r\n        axios.delete(`/templates/${item.name}`)\r\n            .then((result) => {\r\n                refreshTemplates()\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        refreshTemplates()\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"Template\">\r\n            <Table>\r\n                <thead>\r\n                <tr>\r\n                    <th>\r\n                        Template-Name\r\n                    </th>\r\n                    <th>\r\n                        Actions\r\n                    </th>\r\n                </tr>\r\n                </thead>\r\n                {\r\n                    templates.map((item, id) => (\r\n                        item ?\r\n                            <tr>\r\n                                <td>{item.name}</td>\r\n                                <td>\r\n                                    <Button onClick={() => selectTemplate(item)}>\r\n                                        <FaCheck/>\r\n                                    </Button>\r\n                                    <Button onClick={() => deleteTemplate(item)}>\r\n                                        <FaTrashAlt/>\r\n                                    </Button>\r\n                                </td>\r\n                            </tr> : null\r\n                    ))\r\n                }\r\n            </Table>\r\n            <input type=\"file\"\r\n                   ref={(input) => {\r\n                       upload = input;\r\n                   }}\r\n                   style={{display: 'none'}}\r\n                   onChange={event => uploadFile(event, () => {\r\n                       refreshTemplates()\r\n                   })}/>\r\n            <Button onClick={() => upload.click()}>\r\n                <FaPlus/>\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Template;",{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":11,"column":19,"nodeType":"44","messageId":"45","endLine":11,"endColumn":27},{"ruleId":"42","severity":1,"message":"46","line":37,"column":12,"nodeType":"44","messageId":"45","endLine":37,"endColumn":23},{"ruleId":"42","severity":1,"message":"47","line":37,"column":25,"nodeType":"44","messageId":"45","endLine":37,"endColumn":39},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'setState' is assigned a value but never used.","Identifier","unusedVar","'newTemplate' is assigned a value but never used.","'setNewTemplate' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]